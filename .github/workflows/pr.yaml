name: Pull request

on:
  pull_request:
    branches: [main]
    types: [opened, reopened, synchronize, labeled, unlabeled]

permissions:
  contents: read
  pull-requests: write
  repository-projects: read

env:
  COVERAGE_COMMENT_TEXT: "go-test-coverage report:"

jobs:
  test-and-build:
    name: Test and build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Verify labels
        uses: Brains-Beyond-Expectations/labeller@v1
        with:
          required_labels: |
            feature,enhancement,fix,bugfix,bug,chore
            major,minor,patch

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"
          cache-dependency-path: |
            cli/go.sum

      - name: Run tests with coverage
        id: test
        continue-on-error: true
        run: |
          cd cli
          pull_request_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          echo "pull_request_number=$pull_request_number" >> $GITHUB_OUTPUT
          make GHA=true test

      - name: Run build
        run: |
          cd cli
          go build

      - name: Generate a token for Brainz-Bot
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BRAINZ_BOT_ID }}
          private-key: ${{ secrets.BRAINZ_BOT_PRIVATE_KEY }}

      - name: Check for pre-existing PR comment
        uses: peter-evans/find-comment@v3
        continue-on-error: true
        id: find-comment
        with:
          issue-number: ${{ steps.test.outputs.pull_request_number }}
          comment-author: "brainz-bot[bot]"
          body-includes: ${{ env.COVERAGE_COMMENT_TEXT }}

      - name: Comment coverage report
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ steps.generate-token.outputs.token }}
          issue-number: ${{ steps.test.outputs.pull_request_number }}
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            ${{ env.COVERAGE_COMMENT_TEXT }}
            ```
            ${{ fromJSON(steps.test.outputs.report) }}
            ```
      - name: Check coverage
        if: steps.test.outcome == 'failure'
        shell: bash
        run: |
          exit 1
